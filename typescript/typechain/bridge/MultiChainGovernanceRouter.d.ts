/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface MultiChainGovernanceRouterInterface extends ethers.utils.Interface {
  functions: {
    "VERSION()": FunctionFragment;
    "addRemoteChain(uint32,bytes32)": FunctionFragment;
    "executeCallBatch(tuple[])": FunctionFragment;
    "executeGovernanceActions(uint32[],tuple[][])": FunctionFragment;
    "governor()": FunctionFragment;
    "governorDomain()": FunctionFragment;
    "handle(uint32,uint32,bytes32,bytes)": FunctionFragment;
    "inboundCallBatches(bytes32)": FunctionFragment;
    "initialize(uint32,address,address)": FunctionFragment;
    "remoteRouters(uint32)": FunctionFragment;
    "setXAppConnectionManager(address)": FunctionFragment;
    "xAppConnectionManager()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addRemoteChain",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeCallBatch",
    values: [{ to: BytesLike; data: BytesLike }[]]
  ): string;
  encodeFunctionData(
    functionFragment: "executeGovernanceActions",
    values: [BigNumberish[], { to: BytesLike; data: BytesLike }[][]]
  ): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "governorDomain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "handle",
    values: [BigNumberish, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "inboundCallBatches",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "remoteRouters",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setXAppConnectionManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "xAppConnectionManager",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addRemoteChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeCallBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeGovernanceActions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "governorDomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "handle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "inboundCallBatches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "remoteRouters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setXAppConnectionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "xAppConnectionManager",
    data: BytesLike
  ): Result;

  events: {
    "BatchExecuted(bytes32)": EventFragment;
    "BatchReceived(bytes32)": EventFragment;
    "SetRouter(uint32,bytes32,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BatchExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BatchReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetRouter"): EventFragment;
}

export type BatchExecutedEvent = TypedEvent<[string] & { batchHash: string }>;

export type BatchReceivedEvent = TypedEvent<[string] & { batchHash: string }>;

export type SetRouterEvent = TypedEvent<
  [number, string, string] & {
    domain: number;
    previousRouter: string;
    newRouter: string;
  }
>;

export class MultiChainGovernanceRouter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MultiChainGovernanceRouterInterface;

  functions: {
    VERSION(overrides?: CallOverrides): Promise<[number]>;

    addRemoteChain(
      _domain: BigNumberish,
      _router: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeCallBatch(
      _calls: { to: BytesLike; data: BytesLike }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeGovernanceActions(
      _domains: BigNumberish[],
      _remoteCalls: { to: BytesLike; data: BytesLike }[][],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    governor(overrides?: CallOverrides): Promise<[string]>;

    governorDomain(overrides?: CallOverrides): Promise<[number]>;

    handle(
      _origin: BigNumberish,
      arg1: BigNumberish,
      _sender: BytesLike,
      _message: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    inboundCallBatches(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[number]>;

    initialize(
      _governorDomain: BigNumberish,
      _governor: string,
      _xAppConnectionManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    remoteRouters(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    setXAppConnectionManager(
      _xAppConnectionManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    xAppConnectionManager(overrides?: CallOverrides): Promise<[string]>;
  };

  VERSION(overrides?: CallOverrides): Promise<number>;

  addRemoteChain(
    _domain: BigNumberish,
    _router: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeCallBatch(
    _calls: { to: BytesLike; data: BytesLike }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeGovernanceActions(
    _domains: BigNumberish[],
    _remoteCalls: { to: BytesLike; data: BytesLike }[][],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  governor(overrides?: CallOverrides): Promise<string>;

  governorDomain(overrides?: CallOverrides): Promise<number>;

  handle(
    _origin: BigNumberish,
    arg1: BigNumberish,
    _sender: BytesLike,
    _message: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  inboundCallBatches(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<number>;

  initialize(
    _governorDomain: BigNumberish,
    _governor: string,
    _xAppConnectionManager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  remoteRouters(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  setXAppConnectionManager(
    _xAppConnectionManager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  xAppConnectionManager(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    VERSION(overrides?: CallOverrides): Promise<number>;

    addRemoteChain(
      _domain: BigNumberish,
      _router: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    executeCallBatch(
      _calls: { to: BytesLike; data: BytesLike }[],
      overrides?: CallOverrides
    ): Promise<void>;

    executeGovernanceActions(
      _domains: BigNumberish[],
      _remoteCalls: { to: BytesLike; data: BytesLike }[][],
      overrides?: CallOverrides
    ): Promise<void>;

    governor(overrides?: CallOverrides): Promise<string>;

    governorDomain(overrides?: CallOverrides): Promise<number>;

    handle(
      _origin: BigNumberish,
      arg1: BigNumberish,
      _sender: BytesLike,
      _message: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    inboundCallBatches(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<number>;

    initialize(
      _governorDomain: BigNumberish,
      _governor: string,
      _xAppConnectionManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    remoteRouters(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    setXAppConnectionManager(
      _xAppConnectionManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    xAppConnectionManager(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "BatchExecuted(bytes32)"(
      batchHash?: BytesLike | null
    ): TypedEventFilter<[string], { batchHash: string }>;

    BatchExecuted(
      batchHash?: BytesLike | null
    ): TypedEventFilter<[string], { batchHash: string }>;

    "BatchReceived(bytes32)"(
      batchHash?: BytesLike | null
    ): TypedEventFilter<[string], { batchHash: string }>;

    BatchReceived(
      batchHash?: BytesLike | null
    ): TypedEventFilter<[string], { batchHash: string }>;

    "SetRouter(uint32,bytes32,bytes32)"(
      domain?: BigNumberish | null,
      previousRouter?: null,
      newRouter?: null
    ): TypedEventFilter<
      [number, string, string],
      { domain: number; previousRouter: string; newRouter: string }
    >;

    SetRouter(
      domain?: BigNumberish | null,
      previousRouter?: null,
      newRouter?: null
    ): TypedEventFilter<
      [number, string, string],
      { domain: number; previousRouter: string; newRouter: string }
    >;
  };

  estimateGas: {
    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    addRemoteChain(
      _domain: BigNumberish,
      _router: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeCallBatch(
      _calls: { to: BytesLike; data: BytesLike }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeGovernanceActions(
      _domains: BigNumberish[],
      _remoteCalls: { to: BytesLike; data: BytesLike }[][],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<BigNumber>;

    governorDomain(overrides?: CallOverrides): Promise<BigNumber>;

    handle(
      _origin: BigNumberish,
      arg1: BigNumberish,
      _sender: BytesLike,
      _message: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    inboundCallBatches(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _governorDomain: BigNumberish,
      _governor: string,
      _xAppConnectionManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    remoteRouters(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setXAppConnectionManager(
      _xAppConnectionManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    xAppConnectionManager(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addRemoteChain(
      _domain: BigNumberish,
      _router: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeCallBatch(
      _calls: { to: BytesLike; data: BytesLike }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeGovernanceActions(
      _domains: BigNumberish[],
      _remoteCalls: { to: BytesLike; data: BytesLike }[][],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    governor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governorDomain(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    handle(
      _origin: BigNumberish,
      arg1: BigNumberish,
      _sender: BytesLike,
      _message: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    inboundCallBatches(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _governorDomain: BigNumberish,
      _governor: string,
      _xAppConnectionManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    remoteRouters(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setXAppConnectionManager(
      _xAppConnectionManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    xAppConnectionManager(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
